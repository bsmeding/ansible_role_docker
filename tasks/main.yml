---
- name: Load OS-specific vars.
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - '{{ansible_distribution}}.yml'
        - '{{ansible_os_family}}.yml'
        - main.yml
      paths:
        - 'vars'

- name: Ensure group "docker" exists
  group:
    name: docker
    state: present

- name: set docker user
  user:
    name: docker
    comment: docker
    # uid: 1040
    group: docker

- name: get the username
  become: false
  command: whoami
  register: current_username
  changed_when: false

- name: Add current user to docker users group variable
  ansible.builtin.set_fact:
    docker_users: "{{ docker_users | default([]) + [ current_username.stdout ] }}"

- name: Proxy found, set proxy file for docker
  block:
    # Older version used the service conf file
    - name: Creates directory for proxy file (older version before 23)
      ansible.builtin.file:
        path: "/etc/systemd/system/docker.service.d"
        state: directory
        owner: root
        group: root
        recurse: yes

    - name: Set docker http-proxy.conf (older version before 23)
      ansible.builtin.template:
        src: http-proxy.conf.j2
        dest: "/etc/systemd/system/docker.service.d/http-proxy.conf"
      notify: restart docker

  when: (http_proxy is defined and http_proxy|length>5) or ( https_proxy is defined and https_proxy|length>5)


- name: Include tasks for RedHat
  ansible.builtin.include_tasks: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- name: Include tasks for Debian
  ansible.builtin.include_tasks: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- name: Ensure group "docker" exists
  group:
    name: docker
    state: present

- name: Install Docker packages.
  ansible.builtin.package:
    name: "{{ docker_packages }}"
    state: "{{ docker_packages_state }}"
  notify: restart docker
  ignore_errors: "{{ ansible_check_mode }}"
  when: "ansible_version.full is version_compare('2.12', '<') or ansible_os_family not in ['RedHat', 'Debian']"

- name: Install Docker packages (with downgrade option).
  ansible.builtin.package:
    name: "{{ docker_packages }}"
    state: "{{ docker_packages_state }}"
    allow_downgrade: true
  notify: restart docker
  ignore_errors: "{{ ansible_check_mode }}"
  when: "ansible_version.full is version_compare('2.12', '>=') and ansible_os_family in ['RedHat', 'Debian']"

- name: Install docker-compose plugin.
  ansible.builtin.package:
    name: "{{ docker_compose_package }}"
    state: "{{ docker_compose_package_state }}"
  notify: restart docker
  ignore_errors: "{{ ansible_check_mode }}"
  when: "docker_install_compose_plugin | bool == true and (ansible_version.full is version_compare('2.12', '<') or ansible_os_family not in ['RedHat', 'Debian'])"

- name: Install docker-compose-plugin (with downgrade option).
  ansible.builtin.package:
    name: "{{ docker_compose_package }}"
    state: "{{ docker_compose_package_state }}"
    allow_downgrade: true
  notify: restart docker
  ignore_errors: "{{ ansible_check_mode }}"
  when: "docker_install_compose_plugin | bool == true and ansible_version.full is version_compare('2.12', '>=') and ansible_os_family in ['RedHat', 'Debian']"

- name: Ensure /etc/docker/ directory exists.
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    mode: 0755
  when: docker_daemon_options.keys() | length > 0

- name: Configure Docker daemon options.
  ansible.builtin.copy:
    content: "{{ docker_daemon_options | to_nice_json }}"
    dest: /etc/docker/daemon.json
    mode: 0644
  when: docker_daemon_options.keys() | length > 0
  notify: restart docker

- name: Ensure Docker is started and enabled at boot.
  ansible.builtin.service:
    name: docker
    state: "{{ docker_service_state }}"
    enabled: "{{ docker_service_enabled }}"
  ignore_errors: "{{ ansible_check_mode }}"
  when: docker_service_manage | bool

- name: Ensure handlers are notified now to avoid firewall conflicts.
  meta: flush_handlers

- name: Include tasks for docker-compose
  ansible.builtin.include_tasks: docker-compose.yml
  when: docker_install_compose | bool


- name: Get docker group info using getent.
  ansible.builtin.getent:
    database: group
    key: docker
    split: ':'
  when: docker_users | length > 0

- name: Check if there are any users to add to the docker group.
  ansible.builtin.set_fact:
    at_least_one_user_to_modify: true
  when:
    - docker_users | length > 0
    - item not in ansible_facts.getent_group["docker"][2]
  with_items: "{{ docker_users }}"

- name: Include tasks for Docker users
  ansible.builtin.include_tasks: docker-users.yml
  when: at_least_one_user_to_modify is defined

- name: get docker uid
  ansible.builtin.getent:
    database: passwd
    key: docker
  register: docker_uid

- name: Save UID
  ansible.builtin.set_fact:
    docker_uid: "{{ docker_uid.ansible_facts.getent_passwd.docker[1] }}"
    docker_gid: "{{ docker_uid.ansible_facts.getent_passwd.docker[2] }}"
  when: docker_uid is defined
